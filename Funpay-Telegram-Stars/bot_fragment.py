import os
import logging
import time
import json
import re
import requests
from dotenv import load_dotenv
from FunPayAPI import Account
from FunPayAPI.updater.runner import Runner
from FunPayAPI.updater.events import NewOrderEvent, NewMessageEvent

load_dotenv()

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

COOLDOWN_SECONDS = 1
TOKEN_FILE = "auth_token.json"
FRAGMENT_API_URL = "https://api.fragment-api.com/v1"
waiting_for_nick = {}

# Fragment auth
FRAGMENT_TOKEN = None
FRAGMENT_API_KEY = os.getenv("FRAGMENT_API_KEY")
FRAGMENT_PHONE = os.getenv("FRAGMENT_PHONE")
FRAGMENT_MNEMONICS = os.getenv("FRAGMENT_MNEMONICS")


def load_fragment_token():
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, "r") as f:
            return json.load(f).get("token")
    return None


def save_fragment_token(token):
    with open(TOKEN_FILE, "w") as f:
        json.dump({"token": token}, f)


def authenticate_fragment():
    try:
        mnemonics_list = FRAGMENT_MNEMONICS.strip().split()
        payload = {
            "api_key": FRAGMENT_API_KEY,
            "phone_number": FRAGMENT_PHONE,
            "mnemonics": mnemonics_list
        }
        res = requests.post(f"{FRAGMENT_API_URL}/auth/authenticate/", json=payload)
        if res.status_code == 200:
            token = res.json().get("token")
            save_fragment_token(token)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Fragment.")
            return token
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Fragment: {res.text}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Fragment: {e}")
        return None


def check_username_exists(username):
    global FRAGMENT_TOKEN
    url = f"{FRAGMENT_API_URL}/misc/user/{username.lstrip('@')}/"
    headers = {
        "Accept": "application/json",
        "Authorization": f"JWT {FRAGMENT_TOKEN}"
    }
    try:
        res = requests.get(url, headers=headers)
        if res.status_code == 200:
            data = res.json()
            return "username" in data
        else:
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∏–∫–∞: {e}")
        return False


def direct_send_stars(token, username, quantity):
    try:
        data = {"username": username, "quantity": quantity}
        headers = {
            "Authorization": f"JWT {token}",
            "Content-Type": "application/json"
        }
        res = requests.post(f"{FRAGMENT_API_URL}/order/stars/", json=data, headers=headers)
        if res.status_code == 200:
            return True, res.text
        return False, res.text
    except Exception as e:
        return False, str(e)


def parse_fragment_error(response_text):
    try:
        data = json.loads(response_text)
    except:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."

    if isinstance(data, dict):
        if "username" in data:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Telegram-—Ç–µ–≥. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."
        if "quantity" in data:
            return "‚ùå –ú–∏–Ω–∏–º—É–º 50 ‚≠ê –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."
        if "errors" in data:
            for err in data["errors"]:
                if "Not enough funds" in err.get("error", ""):
                    return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."

    if isinstance(data, list):
        if any("Unknown error" in str(e) for e in data):
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."

    return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞."


def extract_stars_count(title: str) -> int:
    if not title:
        return 50
    title = title.lower()

    match = re.search(r"(?:–∑–≤[–µ—ë]–∑–¥[–∞-—è]*[^0-9]{0,10})?(\d{1,6})(?=\D*(–∑–≤|–∑–≤[–µ—ë]–∑–¥|‚≠ê|stars?))", title)
    if not match:
        match = re.search(r"(\d{1,6})\s*(–∑–≤|–∑–≤[–µ—ë]–∑–¥|‚≠ê|stars?)", title)
    if not match:
        match = re.search(r"(\d{1,6})", title)

    if match:
        count = int(match.group(1))
        return max(1, min(count, 1_000_000))

    return 50


def refund_order(account, order_id, chat_id):
    try:
        account.refund(order_id)
        logger.info(f"‚úîÔ∏è –í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        account.send_message(chat_id, "‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –∑–∞–∫–∞–∑ {order_id}: {e}")
        account.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
        return False


def get_subcategory_id_safe(order, account):
    subcat = getattr(order, "subcategory", None) or getattr(order, "sub_category", None)
    if subcat and hasattr(subcat, "id"):
        return subcat.id, subcat

    try:
        full_order = account.get_order(order.id)
        subcat = getattr(full_order, "subcategory", None) or getattr(full_order, "sub_category", None)
        if subcat and hasattr(subcat, "id"):
            return subcat.id, subcat
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–π –∑–∞–∫–∞–∑: {e}")

    return None, None


def main():
    global FRAGMENT_TOKEN
    golden_key = os.getenv("FUNPAY_AUTH_TOKEN")
    if not golden_key:
        logger.error("‚ùå FUNPAY_AUTH_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    account = Account(golden_key)
    account.get()

    if not account.username:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
        return

    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {account.username}")
    runner = Runner(account)

    FRAGMENT_TOKEN = load_fragment_token() or authenticate_fragment()
    if not FRAGMENT_TOKEN:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Fragment.")
        return

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")

    last_reply_time = 0

    for event in runner.listen(requests_delay=3.0):
        try:
            now = time.time()
            if now - last_reply_time < COOLDOWN_SECONDS:
                continue

            if isinstance(event, NewOrderEvent):
                subcat_id, subcat = get_subcategory_id_safe(event.order, account)
                if subcat_id != 2418:
                    logger.info(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫ –∑–∞–∫–∞–∑–∞ ‚Äî –Ω–µ Telegram Stars (ID: {subcat_id or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})")
                    continue

                logger.info(f"üîó –õ–æ—Ç: {subcat.public_link if subcat else '‚Äî'}")
                order = account.get_order(event.order.id)

                title = getattr(order, "title", None) or getattr(order, "short_description", None) \
                        or getattr(order, "full_description", None) or ""

                stars = extract_stars_count(title)

                logger.info(f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {title}")
                logger.info(f"üí´ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–≤—ë–∑–¥: {stars}")

                buyer_id = order.buyer_id
                chat_id = order.chat_id

                waiting_for_nick[buyer_id] = {
                    "chat_id": chat_id,
                    "stars": stars,
                    "order_id": order.id,
                    "state": "awaiting_nick",
                    "temp_nick": None
                }

                account.send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à Telegram-—Ç–µ–≥ (–ø—Ä–∏–º–µ—Ä: @username), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å {stars} ‚≠ê.")
                last_reply_time = now

            elif isinstance(event, NewMessageEvent):
                msg = event.message
                chat_id = msg.chat_id
                user_id = msg.author_id
                text = msg.text.strip()

                if user_id == account.id or user_id not in waiting_for_nick:
                    continue

                user_state = waiting_for_nick[user_id]
                stars = user_state["stars"]
                order_id = user_state["order_id"]

                if user_state["state"] == "awaiting_nick":
                    if not check_username_exists(text):
                        account.send_message(chat_id, f'‚ùå –ù–∏–∫ "{text}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram-—Ç–µ–≥ (–ø—Ä–∏–º–µ—Ä: @username).')
                        last_reply_time = now
                        continue
                    else:
                        user_state["temp_nick"] = text
                        user_state["state"] = "awaiting_confirmation"
                        account.send_message(chat_id, f'–í—ã —É–∫–∞–∑–∞–ª–∏: "{text}". –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à Telegram-—Ç–µ–≥, –Ω–∞–ø–∏—à–∏—Ç–µ "+", –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π.')
                        last_reply_time = now

                elif user_state["state"] == "awaiting_confirmation":
                    if text == "+":
                        username = user_state["temp_nick"].lstrip("@")
                        account.send_message(chat_id, f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é {stars} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}...")
                        success, response = direct_send_stars(FRAGMENT_TOKEN, username, stars)

                        if success:
                            account.send_message(chat_id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stars} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}!")
                            logger.info(f"‚úÖ @{username} –ø–æ–ª—É—á–∏–ª {stars} ‚≠ê")
                        else:
                            short_error = parse_fragment_error(response)
                            account.send_message(chat_id, short_error + "\nüîÅ –ü—ã—Ç–∞—é—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç...")
                            refund_order(account, order_id, chat_id)

                        waiting_for_nick.pop(user_id)
                        last_reply_time = now
                    else:
                        if not check_username_exists(text):
                            account.send_message(chat_id, f'‚ùå –ù–∏–∫ "{text}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram-—Ç–µ–≥.')
                        else:
                            user_state["temp_nick"] = text
                            account.send_message(chat_id, f'–í—ã —É–∫–∞–∑–∞–ª–∏: "{text}". –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à Telegram-—Ç–µ–≥, –Ω–∞–ø–∏—à–∏—Ç–µ "+", –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥.')
                        last_reply_time = now

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")


if __name__ == "__main__":
    main()
